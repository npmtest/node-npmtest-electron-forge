{"/home/travis/build/npmtest/node-npmtest-electron-forge/test.js":"/* istanbul instrument in package npmtest_electron_forge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-forge/lib.npmtest_electron_forge.js":"/* istanbul instrument in package npmtest_electron_forge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_forge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_forge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-forge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-forge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_forge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_forge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_forge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_electron_forge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_forge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_electron_forge.__dirname + '/lib.npmtest_electron_forge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/api/index.js":"'use strict';\n\nrequire('colors');\n\nvar _import2 = require('./import');\n\nvar _import3 = _interopRequireDefault(_import2);\n\nvar _init = require('./init');\n\nvar _init2 = _interopRequireDefault(_init);\n\nvar _install = require('./install');\n\nvar _install2 = _interopRequireDefault(_install);\n\nvar _lint = require('./lint');\n\nvar _lint2 = _interopRequireDefault(_lint);\n\nvar _make = require('./make');\n\nvar _make2 = _interopRequireDefault(_make);\n\nvar _package2 = require('./package');\n\nvar _package3 = _interopRequireDefault(_package2);\n\nvar _publish = require('./publish');\n\nvar _publish2 = _interopRequireDefault(_publish);\n\nvar _start = require('./start');\n\nvar _start2 = _interopRequireDefault(_start);\n\nvar _forgeConfig = require('../util/forge-config');\n\nvar _forgeConfig2 = _interopRequireDefault(_forgeConfig);\n\nvar _readPackageJson = require('../util/read-package-json');\n\nvar _readPackageJson2 = _interopRequireDefault(_readPackageJson);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = {\n  'import': _import3.default, // eslint-disable-line\n  init: _init2.default,\n  install: _install2.default,\n  lint: _lint2.default,\n  make: _make2.default,\n  'package': _package3.default, // eslint-disable-line\n  publish: _publish2.default,\n  start: _start2.default,\n  utils: {\n    getForgeConfig: _forgeConfig2.default,\n    readPackageJSON: _readPackageJson2.default\n  }\n};","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/api/import.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _bluebird = require('bluebird');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _yarnOrNpm = require('yarn-or-npm');\n\nvar _initGit = require('../init/init-git');\n\nvar _initGit2 = _interopRequireDefault(_initGit);\n\nvar _initNpm = require('../init/init-npm');\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nvar _messages = require('../util/messages');\n\nvar _installDependencies = require('../util/install-dependencies');\n\nvar _installDependencies2 = _interopRequireDefault(_installDependencies);\n\nvar _readPackageJson = require('../util/read-package-json');\n\nvar _readPackageJson2 = _interopRequireDefault(_readPackageJson);\n\nvar _confirmIfInteractive = require('../util/confirm-if-interactive');\n\nvar _confirmIfInteractive2 = _interopRequireDefault(_confirmIfInteractive);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:import');\n\n/**\n * @typedef {Object} ImportOptions\n * @property {string} [dir=process.cwd()] The path to the app to be imported\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [updateScripts=true] Whether to update the modules package.json scripts to be electron-forge commands\n * @property {string} [outDir=`${dir}/out`] The path to the directory containing generated distributables\n */\n\n/**\n * Attempt to import a given module directory to the Electron Forge standard.\n *\n * - Replaces the prebuilt electron package with the one that integrates with `electron-compile`\n * - Sets up `git` and the correct NPM dependencies\n * - Adds a template forge config to `package.json`\n *\n * @param {ImportOptions} providedOptions - Options for the import method\n * @return {Promise} Will resolve when the import process is complete\n */\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee8() {\n    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _Object$assign, dir, interactive, updateScripts, outDir, confirm, packageJSON, shouldContinue, shouldChangeMain, _ref2, newMain, keys, buildToolPackages, electronName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, explanation, shouldRemoveDependency, updatePackageScript, writeChanges, electronVersion, electronPackageJSON, templatePackageJSON, babelConfig, babelPath;\n\n    return _regenerator2.default.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _Object$assign = (0, _assign2.default)({\n              dir: process.cwd(),\n              interactive: false,\n              updateScripts: true\n            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, updateScripts = _Object$assign.updateScripts;\n            outDir = providedOptions.outDir || 'out';\n\n            _oraHandler2.default.interactive = interactive;\n\n            d('Attempting to import project in: ' + dir);\n            _context8.next = 6;\n            return _fsPromise2.default.exists(dir);\n\n          case 6:\n            _context8.t0 = !_context8.sent;\n\n            if (_context8.t0) {\n              _context8.next = 11;\n              break;\n            }\n\n            _context8.next = 10;\n            return _fsPromise2.default.exists(_path2.default.resolve(dir, 'package.json'));\n\n          case 10:\n            _context8.t0 = !_context8.sent;\n\n          case 11:\n            if (!_context8.t0) {\n              _context8.next = 13;\n              break;\n            }\n\n            throw 'We couldn\\'t find a project in: ' + dir;\n\n          case 13:\n            _context8.next = 15;\n            return (0, _confirmIfInteractive2.default)(interactive, 'WARNING: We will now attempt to import: \"' + dir + '\".  This will involve modifying some files, are you sure you want to continue?');\n\n          case 15:\n            confirm = _context8.sent;\n\n\n            if (!confirm) {\n              process.exit(0);\n            }\n\n            _context8.next = 19;\n            return (0, _initGit2.default)(dir);\n\n          case 19:\n            _context8.next = 21;\n            return (0, _readPackageJson2.default)(dir);\n\n          case 21:\n            packageJSON = _context8.sent;\n\n            if (!(packageJSON.config && packageJSON.config.forge)) {\n              _context8.next = 28;\n              break;\n            }\n\n            (0, _messages.warn)(interactive, 'It looks like this project is already configured for \"electron-forge\"'.green);\n            _context8.next = 26;\n            return (0, _confirmIfInteractive2.default)(interactive, 'Are you sure you want to continue?');\n\n          case 26:\n            shouldContinue = _context8.sent;\n\n\n            if (!shouldContinue) {\n              process.exit(0);\n            }\n\n          case 28:\n            _context8.next = 30;\n            return (0, _confirmIfInteractive2.default)(interactive, 'Do you want us to change the \"main\" attribute of your package.json?  If you are currently using babel and pointing to a \"build\" directory say yes.', false);\n\n          case 30:\n            shouldChangeMain = _context8.sent;\n\n            if (!shouldChangeMain) {\n              _context8.next = 37;\n              break;\n            }\n\n            _context8.next = 34;\n            return _inquirer2.default.createPromptModule()({\n              type: 'input',\n              name: 'newMain',\n              default: packageJSON.main,\n              message: 'Enter the relative path to your uncompiled main file'\n            });\n\n          case 34:\n            _ref2 = _context8.sent;\n            newMain = _ref2.newMain;\n\n            packageJSON.main = newMain;\n\n          case 37:\n\n            packageJSON.dependencies = packageJSON.dependencies || {};\n            packageJSON.devDependencies = packageJSON.devDependencies || {};\n\n            keys = (0, _keys2.default)(packageJSON.dependencies).concat((0, _keys2.default)(packageJSON.devDependencies));\n            buildToolPackages = {\n              'electron-builder': 'provides mostly equivalent functionality',\n              'electron-download': 'already uses this module as a transitive dependency',\n              'electron-installer-debian': 'already uses this module as a transitive dependency',\n              'electron-installer-dmg': 'already uses this module as a transitive dependency',\n              'electron-installer-flatpak': 'already uses this module as a transitive dependency',\n              'electron-installer-redhat': 'already uses this module as a transitive dependency',\n              'electron-osx-sign': 'already uses this module as a transitive dependency',\n              'electron-packager': 'already uses this module as a transitive dependency',\n              'electron-winstaller': 'already uses this module as a transitive dependency'\n            };\n            electronName = void 0;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context8.prev = 45;\n            _iterator = (0, _getIterator3.default)(keys);\n\n          case 47:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context8.next = 64;\n              break;\n            }\n\n            key = _step.value;\n\n            if (!(key === 'electron' || key === 'electron-prebuilt')) {\n              _context8.next = 55;\n              break;\n            }\n\n            delete packageJSON.dependencies[key];\n            delete packageJSON.devDependencies[key];\n            electronName = key;\n            _context8.next = 61;\n            break;\n\n          case 55:\n            if (!buildToolPackages[key]) {\n              _context8.next = 61;\n              break;\n            }\n\n            explanation = buildToolPackages[key];\n            // eslint-disable-next-line max-len\n\n            _context8.next = 59;\n            return (0, _confirmIfInteractive2.default)(interactive, 'Do you want us to remove the \"' + key + '\" dependency in package.json? Electron Forge ' + explanation + '.');\n\n          case 59:\n            shouldRemoveDependency = _context8.sent;\n\n\n            if (shouldRemoveDependency) {\n              delete packageJSON.dependencies[key];\n              delete packageJSON.devDependencies[key];\n            }\n\n          case 61:\n            _iteratorNormalCompletion = true;\n            _context8.next = 47;\n            break;\n\n          case 64:\n            _context8.next = 70;\n            break;\n\n          case 66:\n            _context8.prev = 66;\n            _context8.t1 = _context8['catch'](45);\n            _didIteratorError = true;\n            _iteratorError = _context8.t1;\n\n          case 70:\n            _context8.prev = 70;\n            _context8.prev = 71;\n\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n\n          case 73:\n            _context8.prev = 73;\n\n            if (!_didIteratorError) {\n              _context8.next = 76;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 76:\n            return _context8.finish(73);\n\n          case 77:\n            return _context8.finish(70);\n\n          case 78:\n\n            packageJSON.scripts = packageJSON.scripts || {};\n            d('reading current scripts object:', packageJSON.scripts);\n\n            updatePackageScript = function () {\n              var _ref3 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(scriptName, newValue) {\n                var shouldUpdate;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(packageJSON.scripts[scriptName] !== newValue)) {\n                          _context.next = 5;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return (0, _confirmIfInteractive2.default)(interactive, 'Do you want us to update the \"' + scriptName + '\" script to instead call the electron-forge task \"' + newValue + '\"', updateScripts);\n\n                      case 3:\n                        shouldUpdate = _context.sent;\n\n                        if (shouldUpdate) {\n                          packageJSON.scripts[scriptName] = newValue;\n                        }\n\n                      case 5:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, undefined);\n              }));\n\n              return function updatePackageScript(_x2, _x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            _context8.next = 83;\n            return updatePackageScript('start', 'electron-forge start');\n\n          case 83:\n            _context8.next = 85;\n            return updatePackageScript('package', 'electron-forge package');\n\n          case 85:\n            _context8.next = 87;\n            return updatePackageScript('make', 'electron-forge make');\n\n          case 87:\n\n            d('forgified scripts object:', packageJSON.scripts);\n\n            writeChanges = function () {\n              var _ref4 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return (0, _oraHandler2.default)('Writing modified package.json file', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {\n                          return _regenerator2.default.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  _context2.next = 2;\n                                  return _fsPromise2.default.writeFile(_path2.default.resolve(dir, 'package.json'), (0, _stringify2.default)(packageJSON, null, 2) + '\\n');\n\n                                case 2:\n                                case 'end':\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2, undefined);\n                        })));\n\n                      case 2:\n                      case 'end':\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, undefined);\n              }));\n\n              return function writeChanges() {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            electronVersion = void 0;\n\n            if (!electronName) {\n              _context8.next = 96;\n              break;\n            }\n\n            _context8.next = 93;\n            return (0, _readPackageJson2.default)(_path2.default.resolve(dir, 'node_modules', electronName));\n\n          case 93:\n            electronPackageJSON = _context8.sent;\n\n            electronVersion = electronPackageJSON.version;\n            packageJSON.devDependencies['electron-prebuilt-compile'] = electronVersion;\n\n          case 96:\n            _context8.next = 98;\n            return writeChanges();\n\n          case 98:\n            if (!electronName) {\n              _context8.next = 101;\n              break;\n            }\n\n            _context8.next = 101;\n            return (0, _oraHandler2.default)('Pruning deleted modules', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4() {\n              return _regenerator2.default.wrap(function _callee4$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      _context4.next = 2;\n                      return new _promise2.default(function (resolve) {\n                        d('attempting to prune node_modules in:', dir);\n                        var child = (0, _yarnOrNpm.spawn)((0, _yarnOrNpm.hasYarn)() ? [] : ['prune'], {\n                          cwd: dir,\n                          stdio: 'ignore'\n                        });\n                        child.on('exit', function () {\n                          return resolve();\n                        });\n                      });\n\n                    case 2:\n                    case 'end':\n                      return _context4.stop();\n                  }\n                }\n              }, _callee4, undefined);\n            })));\n\n          case 101:\n            _context8.next = 103;\n            return (0, _oraHandler2.default)('Installing dependencies', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee5() {\n              return _regenerator2.default.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      d('deleting old dependencies forcefully');\n                      _context5.next = 3;\n                      return _fsPromise2.default.remove(_path2.default.resolve(dir, 'node_modules/.bin/electron'));\n\n                    case 3:\n                      _context5.next = 5;\n                      return _fsPromise2.default.remove(_path2.default.resolve(dir, 'node_modules/.bin/electron.cmd'));\n\n                    case 5:\n                      if (!electronName) {\n                        _context5.next = 8;\n                        break;\n                      }\n\n                      _context5.next = 8;\n                      return _fsPromise2.default.remove(_path2.default.resolve(dir, 'node_modules', electronName));\n\n                    case 8:\n\n                      d('installing dependencies');\n                      _context5.next = 11;\n                      return (0, _installDependencies2.default)(dir, _initNpm.deps);\n\n                    case 11:\n\n                      d('installing devDependencies');\n                      _context5.next = 14;\n                      return (0, _installDependencies2.default)(dir, _initNpm.devDeps, true);\n\n                    case 14:\n\n                      d('installing exactDevDependencies');\n                      _context5.next = 17;\n                      return (0, _installDependencies2.default)(dir, _initNpm.exactDevDeps.map(function (dep) {\n                        if (dep === 'electron-prebuild-compile') {\n                          return dep + '@' + (electronVersion || 'latest');\n                        }\n\n                        return dep;\n                      }), true, true);\n\n                    case 17:\n                    case 'end':\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5, undefined);\n            })));\n\n          case 103:\n            _context8.next = 105;\n            return (0, _readPackageJson2.default)(dir);\n\n          case 105:\n            packageJSON = _context8.sent;\n\n\n            packageJSON.config = packageJSON.config || {};\n            _context8.next = 109;\n            return (0, _readPackageJson2.default)(_path2.default.resolve(__dirname, '../../tmpl'));\n\n          case 109:\n            templatePackageJSON = _context8.sent;\n\n            packageJSON.config.forge = templatePackageJSON.config.forge;\n\n            _context8.next = 113;\n            return writeChanges();\n\n          case 113:\n            _context8.next = 115;\n            return (0, _oraHandler2.default)('Fixing .gitignore', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee6() {\n              var gitignore;\n              return _regenerator2.default.wrap(function _callee6$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      _context6.next = 2;\n                      return _fsPromise2.default.exists(_path2.default.resolve(dir, '.gitignore'));\n\n                    case 2:\n                      if (!_context6.sent) {\n                        _context6.next = 9;\n                        break;\n                      }\n\n                      _context6.next = 5;\n                      return _fsPromise2.default.readFile(_path2.default.resolve(dir, '.gitignore'));\n\n                    case 5:\n                      gitignore = _context6.sent;\n\n                      if (gitignore.includes(outDir)) {\n                        _context6.next = 9;\n                        break;\n                      }\n\n                      _context6.next = 9;\n                      return _fsPromise2.default.writeFile(_path2.default.resolve(dir, '.gitignore'), gitignore + '\\n' + outDir + '/');\n\n                    case 9:\n                    case 'end':\n                      return _context6.stop();\n                  }\n                }\n              }, _callee6, undefined);\n            })));\n\n          case 115:\n            babelConfig = packageJSON.babel;\n            babelPath = _path2.default.resolve(dir, '.babelrc');\n            _context8.t2 = !babelConfig;\n\n            if (!_context8.t2) {\n              _context8.next = 122;\n              break;\n            }\n\n            _context8.next = 121;\n            return _fsPromise2.default.exists(babelPath);\n\n          case 121:\n            _context8.t2 = _context8.sent;\n\n          case 122:\n            if (!_context8.t2) {\n              _context8.next = 128;\n              break;\n            }\n\n            _context8.t3 = JSON;\n            _context8.next = 126;\n            return _fsPromise2.default.readFile(babelPath, 'utf8');\n\n          case 126:\n            _context8.t4 = _context8.sent;\n            babelConfig = _context8.t3.parse.call(_context8.t3, _context8.t4);\n\n          case 128:\n            if (!babelConfig) {\n              _context8.next = 132;\n              break;\n            }\n\n            _context8.next = 131;\n            return (0, _oraHandler2.default)('Porting original babel config', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee7() {\n              var compileConfig, compilePath;\n              return _regenerator2.default.wrap(function _callee7$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      compileConfig = {};\n                      compilePath = _path2.default.resolve(dir, '.compilerc');\n                      _context7.next = 4;\n                      return _fsPromise2.default.exists(compilePath);\n\n                    case 4:\n                      if (!_context7.sent) {\n                        _context7.next = 10;\n                        break;\n                      }\n\n                      _context7.t0 = JSON;\n                      _context7.next = 8;\n                      return _fsPromise2.default.readFile(compilePath, 'utf8');\n\n                    case 8:\n                      _context7.t1 = _context7.sent;\n                      compileConfig = _context7.t0.parse.call(_context7.t0, _context7.t1);\n\n                    case 10:\n                      _context7.next = 12;\n                      return _fsPromise2.default.writeFile(compilePath, (0, _stringify2.default)((0, _assign2.default)(compileConfig, {\n                        'application/javascript': babelConfig\n                      }), null, 2));\n\n                    case 12:\n                    case 'end':\n                      return _context7.stop();\n                  }\n                }\n              }, _callee7, undefined);\n            })));\n\n          case 131:\n\n            (0, _messages.info)(interactive, 'NOTE: You might be able to remove your `.compilerc` file completely if you are only using the `es2016` and `react` presets'.yellow);\n\n          case 132:\n\n            (0, _messages.info)(interactive, '\\n\\nWe have ATTEMPTED to convert your app to be in a format that electron-forge understands.\\nNothing much will have changed but we added the ' + '\"electron-prebuilt-compile\"'.cyan + ' dependency.  This is the dependency you must version bump to get newer versions of Electron.\\n\\n\\nWe also tried to import any build tooling you already had but we can\\'t get everything.  You might need to convert any CLI/gulp/grunt tasks yourself.\\n\\nAlso please note if you are using `preload` scripts you need to follow the steps outlined at https://github.com/electron-userland/electron-forge/wiki/Using-%27preload%27-scripts\\n\\nThanks for using ' + '\"electron-forge\"'.green + '!!!');\n\n          case 133:\n          case 'end':\n            return _context8.stop();\n        }\n      }\n    }, _callee8, undefined, [[45, 66, 70, 78], [71,, 73, 77]]);\n  }));\n\n  return function () {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-git.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _bluebird = require('bluebird');\n\nvar _child_process = require('child_process');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:git');\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3(dir) {\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return (0, _oraHandler2.default)('Initializing Git Repository', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {\n              return _regenerator2.default.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return new _promise2.default(function () {\n                        var _ref3 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(resolve, reject) {\n                          return _regenerator2.default.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  _context.next = 2;\n                                  return _fsPromise2.default.exists(_path2.default.resolve(dir, '.git'));\n\n                                case 2:\n                                  if (!_context.sent) {\n                                    _context.next = 5;\n                                    break;\n                                  }\n\n                                  d('.git directory already exists, skipping git initialization');\n                                  return _context.abrupt('return', resolve());\n\n                                case 5:\n                                  d('executing \"git init\" in directory:', dir);\n                                  (0, _child_process.exec)('git init', {\n                                    cwd: dir\n                                  }, function (err) {\n                                    if (err) return reject(err);\n                                    resolve();\n                                  });\n\n                                case 7:\n                                case 'end':\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee, undefined);\n                        }));\n\n                        return function (_x2, _x3) {\n                          return _ref3.apply(this, arguments);\n                        };\n                      }());\n\n                    case 2:\n                    case 'end':\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2, undefined);\n            })));\n\n          case 2:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/ora-handler.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _colors = require('colors');\n\nvar _colors2 = _interopRequireDefault(_colors);\n\nvar _ora = require('./ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MockOra = function () {\n  function MockOra() {\n    (0, _classCallCheck3.default)(this, MockOra);\n  }\n\n  (0, _createClass3.default)(MockOra, [{\n    key: 'succeed',\n    value: function succeed() {\n      return this;\n    }\n  }, {\n    key: 'fail',\n    value: function fail() {\n      return this;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      return this;\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      return this;\n    }\n  }]);\n  return MockOra;\n}();\n\nvar asyncOra = function asyncOra(initialOraValue, asyncFn) {\n  var processExitFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : process.exit;\n\n  var fnOra = new MockOra();\n  if (asyncOra.interactive) {\n    fnOra = (0, _ora2.default)(initialOraValue).start();\n  }\n  return new _promise2.default(function (resolve, reject) {\n    asyncFn(fnOra).then(function () {\n      fnOra.succeed();\n      resolve();\n    }).catch(function (err) {\n      fnOra.fail();\n      if (asyncOra.interactive) {\n        if (err && err.message && err.stack) {\n          console.error('\\nAn unhandled error has occurred inside Forge:'.red);\n          console.error(_colors2.default.red(err.message));\n          console.error(_colors2.default.red(err.stack));\n        } else {\n          console.error('\\nElectron forge was terminated:'.red);\n          console.error(_colors2.default.red(typeof err === 'string' ? err : (0, _stringify2.default)(err)));\n        }\n        processExitFn(1);\n        // If the process is still alive we should continue because either something went really wrong\n        // or we are testing this function\n        setTimeout(function () {\n          return resolve();\n        }, 500);\n      } else {\n        reject(err);\n      }\n    });\n  });\n};\n\nasyncOra.interactive = true;\n\nexports.default = asyncOra;","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/ora.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _ora = require('ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:lifecycle');\n\nvar useFakeOra = process.env.DEBUG && process.env.DEBUG.includes('electron-forge');\n\nif (useFakeOra) {\n  console.warn('WARNING: DEBUG environment variable detected.  Progress indicators will be sent over electron-forge:lifecycle'.red);\n}\n\nexports.default = useFakeOra ? function (name) {\n  var fake = {\n    start: function start() {\n      d('Process Started:', name);\n      return fake;\n    },\n    fail: function fail() {\n      d(('Process Failed: ' + name).red);\n      return fake;\n    },\n    succeed: function succeed() {\n      d('Process Succeeded:', name);\n      return fake;\n    },\n    stop: function stop() {\n      d('Process Stopped:', name);\n      return fake;\n    }\n  };\n  return fake;\n} : _ora2.default;","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-npm.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.airbnbDeps = exports.standardDeps = exports.exactDevDeps = exports.devDeps = exports.deps = undefined;\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _bluebird = require('bluebird');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _username = require('username');\n\nvar _username2 = _interopRequireDefault(_username);\n\nvar _installDependencies = require('../util/install-dependencies');\n\nvar _installDependencies2 = _interopRequireDefault(_installDependencies);\n\nvar _readPackageJson = require('../util/read-package-json');\n\nvar _readPackageJson2 = _interopRequireDefault(_readPackageJson);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:npm');\n\nvar deps = exports.deps = ['electron-compile'];\nvar devDeps = exports.devDeps = ['babel-preset-env', 'babel-preset-react', 'babel-plugin-transform-async-to-generator'];\nvar exactDevDeps = exports.exactDevDeps = ['electron-prebuilt-compile'];\nvar standardDeps = exports.standardDeps = ['standard'];\nvar airbnbDeps = exports.airbnbDeps = ['eslint', 'eslint-config-airbnb', 'eslint-plugin-import', 'eslint-plugin-jsx-a11y@^3.0.0', 'eslint-plugin-react'];\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3(dir, lintStyle) {\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return (0, _oraHandler2.default)('Initializing NPM Module', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n              var packageJSON;\n              return _regenerator2.default.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return (0, _readPackageJson2.default)(_path2.default.resolve(__dirname, '../../tmpl'));\n\n                    case 2:\n                      packageJSON = _context.sent;\n\n                      packageJSON.productName = packageJSON.name = _path2.default.basename(dir).toLowerCase();\n                      packageJSON.config.forge.electronWinstallerConfig.name = packageJSON.name.replace(/-/g, '_');\n                      packageJSON.config.forge.windowsStoreConfig.name = packageJSON.productName.replace(/-/g, '');\n                      _context.next = 8;\n                      return (0, _username2.default)();\n\n                    case 8:\n                      packageJSON.author = _context.sent;\n                      _context.t0 = lintStyle;\n                      _context.next = _context.t0 === 'standard' ? 12 : _context.t0 === 'airbnb' ? 14 : 16;\n                      break;\n\n                    case 12:\n                      packageJSON.scripts.lint = 'standard';\n                      return _context.abrupt('break', 18);\n\n                    case 14:\n                      packageJSON.scripts.lint = 'eslint src';\n                      return _context.abrupt('break', 18);\n\n                    case 16:\n                      packageJSON.scripts.lint = 'echo \"No linting configured\"';\n                      return _context.abrupt('break', 18);\n\n                    case 18:\n                      d('writing package.json to:', dir);\n                      _context.next = 21;\n                      return _fsPromise2.default.writeFile(_path2.default.resolve(dir, 'package.json'), (0, _stringify2.default)(packageJSON, null, 4));\n\n                    case 21:\n                    case 'end':\n                      return _context.stop();\n                  }\n                }\n              }, _callee, undefined);\n            })));\n\n          case 2:\n            _context3.next = 4;\n            return (0, _oraHandler2.default)('Installing NPM Dependencies', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {\n              var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, packageName, content, electronPrebuilt, _arr, _i, profile, envTarget;\n\n              return _regenerator2.default.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      d('installing dependencies');\n                      _context2.next = 3;\n                      return (0, _installDependencies2.default)(dir, deps);\n\n                    case 3:\n\n                      d('installing devDependencies');\n                      _context2.next = 6;\n                      return (0, _installDependencies2.default)(dir, devDeps, true);\n\n                    case 6:\n\n                      d('installing exact dependencies');\n                      _iteratorNormalCompletion = true;\n                      _didIteratorError = false;\n                      _iteratorError = undefined;\n                      _context2.prev = 10;\n                      _iterator = (0, _getIterator3.default)(exactDevDeps);\n\n                    case 12:\n                      if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                        _context2.next = 19;\n                        break;\n                      }\n\n                      packageName = _step.value;\n                      _context2.next = 16;\n                      return (0, _installDependencies2.default)(dir, [packageName], true, true);\n\n                    case 16:\n                      _iteratorNormalCompletion = true;\n                      _context2.next = 12;\n                      break;\n\n                    case 19:\n                      _context2.next = 25;\n                      break;\n\n                    case 21:\n                      _context2.prev = 21;\n                      _context2.t0 = _context2['catch'](10);\n                      _didIteratorError = true;\n                      _iteratorError = _context2.t0;\n\n                    case 25:\n                      _context2.prev = 25;\n                      _context2.prev = 26;\n\n                      if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                      }\n\n                    case 28:\n                      _context2.prev = 28;\n\n                      if (!_didIteratorError) {\n                        _context2.next = 31;\n                        break;\n                      }\n\n                      throw _iteratorError;\n\n                    case 31:\n                      return _context2.finish(28);\n\n                    case 32:\n                      return _context2.finish(25);\n\n                    case 33:\n                      _context2.t1 = lintStyle;\n                      _context2.next = _context2.t1 === 'standard' ? 36 : _context2.t1 === 'airbnb' ? 40 : 44;\n                      break;\n\n                    case 36:\n                      d('installing standard linting dependencies');\n                      _context2.next = 39;\n                      return (0, _installDependencies2.default)(dir, standardDeps, true);\n\n                    case 39:\n                      return _context2.abrupt('break', 46);\n\n                    case 40:\n                      d('installing airbnb linting dependencies');\n                      _context2.next = 43;\n                      return (0, _installDependencies2.default)(dir, airbnbDeps, true);\n\n                    case 43:\n                      return _context2.abrupt('break', 46);\n\n                    case 44:\n                      d('not installing linting deps');\n                      return _context2.abrupt('break', 46);\n\n                    case 46:\n                      _context2.t2 = JSON;\n                      _context2.next = 49;\n                      return _fsPromise2.default.readFile(_path2.default.join(dir, '.compilerc'), 'utf8');\n\n                    case 49:\n                      _context2.t3 = _context2.sent;\n                      content = _context2.t2.parse.call(_context2.t2, _context2.t3);\n                      electronPrebuilt = require(_path2.default.join(dir, 'node_modules', 'electron-prebuilt-compile', 'package.json'));\n                      _arr = ['development', 'production'];\n\n\n                      for (_i = 0; _i < _arr.length; _i++) {\n                        profile = _arr[_i];\n                        envTarget = content.env[profile]['application/javascript'].presets.find(function (x) {\n                          return x[0] === 'env';\n                        });\n                        // parseFloat strips the patch version\n                        // parseFloat('1.3.2') === 1.3\n\n                        envTarget[1].targets.electron = parseFloat(electronPrebuilt.version);\n                      }\n\n                      _context2.next = 56;\n                      return _fsPromise2.default.writeFile(_path2.default.join(dir, '.compilerc'), (0, _stringify2.default)(content, null, 2), 'utf8');\n\n                    case 56:\n                    case 'end':\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2, undefined, [[10, 21, 25, 33], [26,, 28, 32]]);\n            })));\n\n          case 4:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, undefined);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/install-dependencies.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _yarnOrNpm = require('yarn-or-npm');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:dependency-installer');\n\nexports.default = function (dir, deps) {\n  var areDev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var exact = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  d('installing', (0, _stringify2.default)(deps), 'in:', dir, 'dev=' + areDev + ',exact=' + exact + ',withYarn=' + (0, _yarnOrNpm.hasYarn)());\n  if (deps.length === 0) {\n    d('nothing to install, stopping immediately');\n    return _promise2.default.resolve();\n  }\n  var cmd = ['install'].concat(deps);\n  if ((0, _yarnOrNpm.hasYarn)()) {\n    cmd = ['add'].concat(deps);\n    if (areDev) cmd.push('--dev');\n    if (exact) cmd.push('--exact');\n  } else {\n    if (exact) cmd.push('--save-exact');\n    if (areDev) cmd.push('--save-dev');\n    if (!areDev) cmd.push('--save');\n  }\n  return new _promise2.default(function (resolve, reject) {\n    d('executing', (0, _stringify2.default)(cmd), 'in:', dir);\n    var child = (0, _yarnOrNpm.spawn)(cmd, {\n      cwd: dir,\n      stdio: _config2.default.get('verbose') ? 'inherit' : 'pipe'\n    });\n    var output = '';\n    if (!_config2.default.get('verbose')) {\n      child.stdout.on('data', function (data) {\n        output += data;\n      });\n      child.stderr.on('data', function (data) {\n        output += data;\n      });\n    }\n    child.on('exit', function (code) {\n      if (code !== 0) return reject(new Error('Failed to install modules: ' + (0, _stringify2.default)(deps) + '\\n\\nWith output: ' + output));\n      resolve();\n    });\n  });\n};","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/config.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:runtime-config');\n\n/*\n * Let's be real: sharing config across spawned processes must be easier than\n * this...\n */\n\nvar BasicConfigStore = function () {\n  function BasicConfigStore() {\n    var _this = this;\n\n    (0, _classCallCheck3.default)(this, BasicConfigStore);\n\n    this._store = {};\n    this._dir = _path2.default.resolve(_os2.default.tmpdir(), 'electron-forge');\n    this._path = _path2.default.resolve(this._dir, '.runtime.config');\n    _fsPromise2.default.mkdirsSync(this._dir);\n\n    process.on('exit', function () {\n      _this.reset();\n    });\n  }\n\n  (0, _createClass3.default)(BasicConfigStore, [{\n    key: 'get',\n    value: function get(key) {\n      this._load();\n      d('fetching key', key);\n      return this._store[key];\n    }\n  }, {\n    key: 'set',\n    value: function set(key, value) {\n      this._load();\n      this._store[key] = value;\n      d('setting key:', key, 'to value:', value);\n      _fsPromise2.default.writeFileSync(this._path, (0, _stringify2.default)(this._store));\n    }\n  }, {\n    key: '_load',\n    value: function _load() {\n      if (_fsPromise2.default.existsSync(this._path)) {\n        this._store = JSON.parse(_fsPromise2.default.readFileSync(this._path, 'utf8'));\n      }\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._store = {};\n      _fsPromise2.default.writeFileSync(this._path, (0, _stringify2.default)(this._store));\n    }\n  }]);\n  return BasicConfigStore;\n}();\n\nexports.default = new BasicConfigStore();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/read-package-json.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(dir) {\n    var packageData;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _fsPromise2.default.readFile(_path2.default.resolve(dir, 'package.json'), 'utf8');\n\n          case 2:\n            packageData = _context.sent;\n            return _context.abrupt('return', JSON.parse(packageData));\n\n          case 4:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/messages.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction info(interactive, message) {\n  if (interactive) {\n    console.info(message);\n  }\n}\n\nfunction warn(interactive, message) {\n  if (interactive) {\n    console.warn(message);\n  }\n}\n\nexports.info = info;\nexports.warn = warn;","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/confirm-if-interactive.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(interactive, message) {\n    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!interactive) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 3;\n            return _inquirer2.default.createPromptModule()({\n              type: 'confirm',\n              name: 'confirm',\n              message: message\n            });\n\n          case 3:\n            return _context.abrupt('return', _context.sent.confirm);\n\n          case 4:\n            return _context.abrupt('return', defaultValue);\n\n          case 5:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/api/init.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _bluebird = require('bluebird');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _initCustom = require('../init/init-custom');\n\nvar _initCustom2 = _interopRequireDefault(_initCustom);\n\nvar _initDirectory = require('../init/init-directory');\n\nvar _initDirectory2 = _interopRequireDefault(_initDirectory);\n\nvar _initGit = require('../init/init-git');\n\nvar _initGit2 = _interopRequireDefault(_initGit);\n\nvar _initNpm = require('../init/init-npm');\n\nvar _initNpm2 = _interopRequireDefault(_initNpm);\n\nvar _initStandardFix = require('../init/init-standard-fix');\n\nvar _initStandardFix2 = _interopRequireDefault(_initStandardFix);\n\nvar _initStarterFiles = require('../init/init-starter-files');\n\nvar _initStarterFiles2 = _interopRequireDefault(_initStarterFiles);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init');\n\n/**\n * @typedef {Object} InitOptions\n * @property {string} [dir=process.cwd()] The path to the app to be initialized\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {string} [lintstyle=airbnb] The lintstyle to pass through to the template creator\n * @property {string} [template] The custom template to use. If left empty, the default template is used\n */\n\n/**\n * Initialize a new Electron Forge template project in the given directory.\n *\n * @param {InitOptions} providedOptions - Options for the init method\n * @return {Promise} Will resolve when the initialization process is complete\n */\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _Object$assign, dir, interactive, lintstyle, template;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // eslint-disable-next-line prefer-const, no-unused-vars\n            _Object$assign = (0, _assign2.default)({\n              dir: process.cwd(),\n              interactive: false,\n              lintstyle: 'airbnb',\n              template: null\n            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, lintstyle = _Object$assign.lintstyle, template = _Object$assign.template;\n\n            _oraHandler2.default.interactive = interactive;\n\n            d('Initializing in: ' + dir);\n\n            if (!template) {\n              lintstyle = lintstyle.toLowerCase();\n              if (!['airbnb', 'standard'].includes(lintstyle)) {\n                d('Unrecognized lintstyle argument: \\'' + lintstyle + '\\' -- defaulting to \\'airbnb\\'');\n                lintstyle = 'airbnb';\n              }\n            }\n\n            _context.next = 6;\n            return (0, _initDirectory2.default)(dir, interactive);\n\n          case 6:\n            _context.next = 8;\n            return (0, _initGit2.default)(dir);\n\n          case 8:\n            _context.next = 10;\n            return (0, _initStarterFiles2.default)(dir, template ? undefined : lintstyle);\n\n          case 10:\n            _context.next = 12;\n            return (0, _initNpm2.default)(dir, template ? undefined : lintstyle);\n\n          case 12:\n            if (template) {\n              _context.next = 18;\n              break;\n            }\n\n            if (!(lintstyle === 'standard')) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 16;\n            return (0, _initStandardFix2.default)(dir);\n\n          case 16:\n            _context.next = 20;\n            break;\n\n          case 18:\n            _context.next = 20;\n            return (0, _initCustom2.default)(dir, template, lintstyle);\n\n          case 20:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function () {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-custom.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _resolvePackage = require('resolve-package');\n\nvar _resolvePackage2 = _interopRequireDefault(_resolvePackage);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _initStarterFiles = require('./init-starter-files');\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nvar _installDependencies = require('../util/install-dependencies');\n\nvar _installDependencies2 = _interopRequireDefault(_installDependencies);\n\nvar _ora = require('../util/ora');\n\nvar _ora2 = _interopRequireDefault(_ora);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:custom');\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4(dir, template, lintStyle) {\n    var templateModulePath, templateModule;\n    return _regenerator2.default.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            templateModulePath = void 0;\n            _context4.next = 3;\n            return (0, _oraHandler2.default)('Locating custom template: \"' + template + '\"', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n              return _regenerator2.default.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      _context.next = 3;\n                      return (0, _resolvePackage2.default)('electron-forge-template-' + template);\n\n                    case 3:\n                      templateModulePath = _context.sent;\n\n                      d('using global template');\n                      _context.next = 17;\n                      break;\n\n                    case 7:\n                      _context.prev = 7;\n                      _context.t0 = _context['catch'](0);\n                      _context.prev = 9;\n\n                      templateModulePath = require.resolve('electron-forge-template-' + template);\n                      d('using local template');\n                      _context.next = 17;\n                      break;\n\n                    case 14:\n                      _context.prev = 14;\n                      _context.t1 = _context['catch'](9);\n                      throw 'Failed to locate custom template: \"' + template + '\"\\n\\nTry `npm install -g electron-forge-template-' + template + '`';\n\n                    case 17:\n                    case 'end':\n                      return _context.stop();\n                  }\n                }\n              }, _callee, undefined, [[0, 7], [9, 14]]);\n            })));\n\n          case 3:\n            templateModule = require(templateModulePath);\n\n\n            templateModule = templateModule.default || templateModule;\n\n            _context4.next = 7;\n            return (0, _oraHandler2.default)('Installing Template Dependencies', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {\n              return _regenerator2.default.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      d('installing dependencies');\n                      _context2.next = 3;\n                      return (0, _installDependencies2.default)(dir, templateModule.dependencies || []);\n\n                    case 3:\n                      d('installing devDependencies');\n                      _context2.next = 6;\n                      return (0, _installDependencies2.default)(dir, templateModule.devDependencies || [], true);\n\n                    case 6:\n                    case 'end':\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2, undefined);\n            })));\n\n          case 7:\n            _context4.next = 9;\n            return (0, _oraHandler2.default)('Copying Template Files', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {\n              var templateDirectory, tmplPath, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file;\n\n              return _regenerator2.default.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      templateDirectory = templateModule.templateDirectory;\n\n                      if (!templateDirectory) {\n                        _context3.next = 35;\n                        break;\n                      }\n\n                      tmplPath = templateDirectory;\n\n                      if (_path2.default.isAbsolute(templateDirectory)) {\n                        _context3.next = 5;\n                        break;\n                      }\n\n                      throw 'Custom template path needs to be absolute, this is an issue with \"electron-forge-template-' + template + '\"';\n\n                    case 5:\n                      files = _glob2.default.sync(_path2.default.resolve(tmplPath, '**/*'));\n                      _iteratorNormalCompletion = true;\n                      _didIteratorError = false;\n                      _iteratorError = undefined;\n                      _context3.prev = 9;\n                      _iterator = (0, _getIterator3.default)(files);\n\n                    case 11:\n                      if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                        _context3.next = 21;\n                        break;\n                      }\n\n                      file = _step.value;\n                      _context3.next = 15;\n                      return _fsPromise2.default.stat(file);\n\n                    case 15:\n                      if (!_context3.sent.isFile()) {\n                        _context3.next = 18;\n                        break;\n                      }\n\n                      _context3.next = 18;\n                      return (0, _initStarterFiles.copy)(file, _path2.default.resolve(dir, _path2.default.relative(tmplPath, file).replace(/^_/, '.')));\n\n                    case 18:\n                      _iteratorNormalCompletion = true;\n                      _context3.next = 11;\n                      break;\n\n                    case 21:\n                      _context3.next = 27;\n                      break;\n\n                    case 23:\n                      _context3.prev = 23;\n                      _context3.t0 = _context3['catch'](9);\n                      _didIteratorError = true;\n                      _iteratorError = _context3.t0;\n\n                    case 27:\n                      _context3.prev = 27;\n                      _context3.prev = 28;\n\n                      if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                      }\n\n                    case 30:\n                      _context3.prev = 30;\n\n                      if (!_didIteratorError) {\n                        _context3.next = 33;\n                        break;\n                      }\n\n                      throw _iteratorError;\n\n                    case 33:\n                      return _context3.finish(30);\n\n                    case 34:\n                      return _context3.finish(27);\n\n                    case 35:\n                    case 'end':\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3, undefined, [[9, 23, 27, 35], [28,, 30, 34]]);\n            })));\n\n          case 9:\n            if (!(typeof templateModule.postCopy === 'function')) {\n              _context4.next = 12;\n              break;\n            }\n\n            _context4.next = 12;\n            return _promise2.default.resolve(templateModule.postCopy(dir, _ora2.default, lintStyle));\n\n          case 12:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, undefined);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-starter-files.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copy = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:starter-files');\n\nvar copy = exports.copy = function copy(source, target) {\n  return new _promise2.default(function (resolve, reject) {\n    d('copying \"' + source + '\" --> \"' + target + '\"');\n    var rd = void 0;\n    var wr = void 0;\n    var rejectCleanup = function rejectCleanup(err) {\n      rd.destroy();\n      wr.end();\n      reject(err);\n    };\n    rd = _fsPromise2.default.createReadStream(source);\n    rd.on('error', rejectCleanup);\n    wr = _fsPromise2.default.createWriteStream(target);\n    wr.on('error', rejectCleanup);\n    wr.on('finish', resolve);\n    rd.pipe(wr);\n  });\n};\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee4(dir, lintStyle) {\n    return _regenerator2.default.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return (0, _oraHandler2.default)('Copying Starter Files', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {\n              var tmplPath, rootFiles, srcFiles;\n              return _regenerator2.default.wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      tmplPath = _path2.default.resolve(__dirname, '../../tmpl');\n\n\n                      d('creating directory:', _path2.default.resolve(dir, 'src'));\n                      _context3.next = 4;\n                      return _fsPromise2.default.mkdirs(_path2.default.resolve(dir, 'src'));\n\n                    case 4:\n                      rootFiles = ['_gitignore', '_compilerc'];\n\n                      if (lintStyle === 'airbnb') rootFiles.push('_eslintrc');\n                      srcFiles = ['index.js', 'index.html'];\n\n\n                      rootFiles.forEach(function () {\n                        var _ref3 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(file) {\n                          return _regenerator2.default.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  _context.next = 2;\n                                  return copy(_path2.default.resolve(tmplPath, file), _path2.default.resolve(dir, file.replace(/^_/, '.')));\n\n                                case 2:\n                                case 'end':\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee, undefined);\n                        }));\n\n                        return function (_x3) {\n                          return _ref3.apply(this, arguments);\n                        };\n                      }());\n                      srcFiles.forEach(function () {\n                        var _ref4 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2(file) {\n                          return _regenerator2.default.wrap(function _callee2$(_context2) {\n                            while (1) {\n                              switch (_context2.prev = _context2.next) {\n                                case 0:\n                                  _context2.next = 2;\n                                  return copy(_path2.default.resolve(tmplPath, file), _path2.default.resolve(dir, 'src', file));\n\n                                case 2:\n                                case 'end':\n                                  return _context2.stop();\n                              }\n                            }\n                          }, _callee2, undefined);\n                        }));\n\n                        return function (_x4) {\n                          return _ref4.apply(this, arguments);\n                        };\n                      }());\n\n                    case 9:\n                    case 'end':\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3, undefined);\n            })));\n\n          case 2:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, undefined);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-directory.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _logSymbols = require('log-symbols');\n\nvar _logSymbols2 = _interopRequireDefault(_logSymbols);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nvar _confirmIfInteractive = require('../util/confirm-if-interactive');\n\nvar _confirmIfInteractive2 = _interopRequireDefault(_confirmIfInteractive);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:directory');\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2(dir, interactive) {\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, _oraHandler2.default)('Initializing Project Directory', function () {\n              var _ref2 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(initSpinner) {\n                var files, confirm;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        d('creating directory:', dir);\n                        _context.next = 3;\n                        return _fsPromise2.default.mkdirs(dir);\n\n                      case 3:\n                        _context.next = 5;\n                        return _fsPromise2.default.readdir(dir);\n\n                      case 5:\n                        files = _context.sent;\n\n                        if (!(files.length !== 0)) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        d('found', files.length, 'files in the directory.  warning the user');\n                        initSpinner.stop(_logSymbols2.default.warning);\n                        _context.next = 11;\n                        return (0, _confirmIfInteractive2.default)(interactive, 'WARNING: The specified path: \"' + dir + '\" is not empty, do you wish to continue?');\n\n                      case 11:\n                        confirm = _context.sent;\n\n                        if (confirm) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        throw 'Cancelled by user';\n\n                      case 14:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, undefined);\n              }));\n\n              return function (_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 2:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/init/init-standard-fix.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _yarnOrNpm = require('yarn-or-npm');\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:init:standard-fix');\n\nvar run = function run(dir) {\n  return new _promise2.default(function (resolve, reject) {\n    var child = (0, _yarnOrNpm.spawn)(['run', 'lint', '--', '--fix'], {\n      stdio: 'inherit',\n      cwd: dir\n    });\n\n    child.on('exit', function (code) {\n      if (code === 0) resolve();\n      if (code !== 0) reject(new Error('Failed to fix JS to standard style (' + code + ')'));\n    });\n  });\n};\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2(dir) {\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, _oraHandler2.default)('Applying Standard Style to JS', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n              return _regenerator2.default.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      d('executing \"standard --fix\" in:', dir);\n                      _context.next = 3;\n                      return run(dir);\n\n                    case 3:\n                    case 'end':\n                      return _context.stop();\n                  }\n                }\n              }, _callee, undefined);\n            })));\n\n          case 2:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/api/install.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _bluebird = require('bluebird');\n\nrequire('colors');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _nodeFetch = require('node-fetch');\n\nvar _nodeFetch2 = _interopRequireDefault(_nodeFetch);\n\nvar _fsPromise = require('fs-promise');\n\nvar _fsPromise2 = _interopRequireDefault(_fsPromise);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nvar _nugget = require('nugget');\n\nvar _nugget2 = _interopRequireDefault(_nugget);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _pify = require('pify');\n\nvar _pify2 = _interopRequireDefault(_pify);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _oraHandler = require('../util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nvar _messages = require('../util/messages');\n\nvar _dmg = require('../installers/darwin/dmg');\n\nvar _dmg2 = _interopRequireDefault(_dmg);\n\nvar _zip = require('../installers/darwin/zip');\n\nvar _zip2 = _interopRequireDefault(_zip);\n\nvar _deb = require('../installers/linux/deb');\n\nvar _deb2 = _interopRequireDefault(_deb);\n\nvar _rpm = require('../installers/linux/rpm');\n\nvar _rpm2 = _interopRequireDefault(_rpm);\n\nvar _exe = require('../installers/win32/exe');\n\nvar _exe2 = _interopRequireDefault(_exe);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar d = (0, _debug2.default)('electron-forge:install');\n\nvar GITHUB_API = 'https://api.github.com';\n\n/**\n * @typedef {Object} InstallOptions\n * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually\n * @property {boolean} [prerelease=false] Whether to install prerelease versions\n * @property {string} repo The GitHub repository to install from, in the format owner/name\n * @property {function} chooseAsset A function that must return the asset to use/install from a provided array of compatible GitHub assets\n */\n\n/**\n * Install an Electron application from GitHub. If you leave interactive as `false`, you MUST provide a `chooseAsset` function.\n *\n * @param {InstallOptions} providedOptions - Options for the install method\n * @return {Promise} Will resolve when the install process is complete\n */\n\nexports.default = function () {\n  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee3() {\n    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _Object$assign, interactive, prerelease, repo, chooseAsset, latestRelease, possibleAssets, targetAsset, choices, _ref3, assetID, tmpdir, pathSafeRepo, filename, fullFilePath, nuggetOpts;\n\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-next-line prefer-const, no-unused-vars\n            _Object$assign = (0, _assign2.default)({\n              interactive: false,\n              prerelease: false\n            }, providedOptions), interactive = _Object$assign.interactive, prerelease = _Object$assign.prerelease, repo = _Object$assign.repo, chooseAsset = _Object$assign.chooseAsset;\n\n            _oraHandler2.default.interactive = interactive;\n\n            latestRelease = void 0;\n            possibleAssets = [];\n            _context3.next = 6;\n            return (0, _oraHandler2.default)('Searching for Application', function () {\n              var _ref2 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(searchSpinner) {\n                var releases, sortedReleases, assets, installTargets;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(!repo || repo.indexOf('/') === -1)) {\n                          _context.next = 2;\n                          break;\n                        }\n\n                        throw 'Invalid repository name, must be in the format owner/name';\n\n                      case 2:\n\n                        d('searching for repo:', repo);\n                        releases = void 0;\n                        _context.prev = 4;\n                        _context.next = 7;\n                        return (0, _nodeFetch2.default)(GITHUB_API + '/repos/' + repo + '/releases');\n\n                      case 7:\n                        _context.next = 9;\n                        return _context.sent.json();\n\n                      case 9:\n                        releases = _context.sent;\n                        _context.next = 14;\n                        break;\n\n                      case 12:\n                        _context.prev = 12;\n                        _context.t0 = _context['catch'](4);\n\n                      case 14:\n                        if (!(!releases || releases.message === 'Not Found' || !Array.isArray(releases))) {\n                          _context.next = 16;\n                          break;\n                        }\n\n                        throw 'Failed to find releases for repository \"' + repo + '\".  Please check the name and try again.';\n\n                      case 16:\n\n                        releases = releases.filter(function (release) {\n                          return !release.prerelease || prerelease;\n                        });\n\n                        sortedReleases = releases.sort(function (releaseA, releaseB) {\n                          var tagA = releaseA.tag_name;\n                          if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);\n                          var tagB = releaseB.tag_name;\n                          if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);\n                          return _semver2.default.gt(tagB, tagA) ? 1 : -1;\n                        });\n\n                        latestRelease = sortedReleases[0];\n\n                        searchSpinner.text = 'Searching for Releases'; // eslint-disable-line\n\n                        assets = latestRelease.assets;\n\n                        if (!(!assets || !Array.isArray(assets))) {\n                          _context.next = 23;\n                          break;\n                        }\n\n                        throw 'Could not find any assets for the latest release';\n\n                      case 23:\n                        installTargets = {\n                          win32: [/\\.exe$/],\n                          darwin: [/OSX.*\\.zip$/, /darwin.*\\.zip$/, /macOS.*\\.zip$/, /mac.*\\.zip$/, /\\.dmg$/],\n                          linux: [/\\.rpm$/, /\\.deb$/]\n                        };\n\n\n                        possibleAssets = assets.filter(function (asset) {\n                          var targetSuffixes = installTargets[process.platform];\n                          var _iteratorNormalCompletion = true;\n                          var _didIteratorError = false;\n                          var _iteratorError = undefined;\n\n                          try {\n                            for (var _iterator = (0, _getIterator3.default)(targetSuffixes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                              var suffix = _step.value;\n\n                              if (suffix.test(asset.name)) return true;\n                            }\n                          } catch (err) {\n                            _didIteratorError = true;\n                            _iteratorError = err;\n                          } finally {\n                            try {\n                              if (!_iteratorNormalCompletion && _iterator.return) {\n                                _iterator.return();\n                              }\n                            } finally {\n                              if (_didIteratorError) {\n                                throw _iteratorError;\n                              }\n                            }\n                          }\n\n                          return false;\n                        });\n\n                        if (!(possibleAssets.length === 0)) {\n                          _context.next = 27;\n                          break;\n                        }\n\n                        throw 'Failed to find any installable assets for target platform: ' + ('' + process.platform).cyan;\n\n                      case 27:\n                      case 'end':\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, undefined, [[4, 12]]);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 6:\n\n            (0, _messages.info)(interactive, 'Found latest release' + (prerelease ? ' (including prereleases)' : '') + ': ' + latestRelease.tag_name.cyan);\n\n            targetAsset = possibleAssets[0];\n\n            if (!(possibleAssets.length > 1)) {\n              _context3.next = 26;\n              break;\n            }\n\n            if (!chooseAsset) {\n              _context3.next = 15;\n              break;\n            }\n\n            _context3.next = 12;\n            return _promise2.default.resolve(chooseAsset(possibleAssets));\n\n          case 12:\n            targetAsset = _context3.sent;\n            _context3.next = 26;\n            break;\n\n          case 15:\n            if (!interactive) {\n              _context3.next = 25;\n              break;\n            }\n\n            choices = [];\n\n            possibleAssets.forEach(function (asset) {\n              choices.push({ name: asset.name, value: asset.id });\n            });\n            _context3.next = 20;\n            return _inquirer2.default.createPromptModule()({\n              type: 'list',\n              name: 'assetID',\n              message: 'Multiple potential assets found, please choose one from the list below:'.cyan,\n              choices: choices\n            });\n\n          case 20:\n            _ref3 = _context3.sent;\n            assetID = _ref3.assetID;\n\n\n            targetAsset = possibleAssets.find(function (asset) {\n              return asset.id === assetID;\n            });\n            _context3.next = 26;\n            break;\n\n          case 25:\n            throw 'expected a chooseAsset function to be provided but it was not';\n\n          case 26:\n            tmpdir = _path2.default.resolve(_os2.default.tmpdir(), 'forge-install');\n            pathSafeRepo = repo.replace(/[/\\\\]/g, '-');\n            filename = pathSafeRepo + '-' + latestRelease.tag_name + '-' + targetAsset.name;\n            fullFilePath = _path2.default.resolve(tmpdir, filename);\n            _context3.next = 32;\n            return _fsPromise2.default.exists(fullFilePath);\n\n          case 32:\n            _context3.t0 = !_context3.sent;\n\n            if (_context3.t0) {\n              _context3.next = 39;\n              break;\n            }\n\n            _context3.next = 36;\n            return _fsPromise2.default.stat(fullFilePath);\n\n          case 36:\n            _context3.t1 = _context3.sent.size;\n            _context3.t2 = targetAsset.size;\n            _context3.t0 = _context3.t1 !== _context3.t2;\n\n          case 39:\n            if (!_context3.t0) {\n              _context3.next = 45;\n              break;\n            }\n\n            _context3.next = 42;\n            return _fsPromise2.default.mkdirs(tmpdir);\n\n          case 42:\n            nuggetOpts = {\n              target: filename,\n              dir: tmpdir,\n              resume: true,\n              strictSSL: true\n            };\n            _context3.next = 45;\n            return (0, _pify2.default)(_nugget2.default)(targetAsset.browser_download_url, nuggetOpts);\n\n          case 45:\n            _context3.next = 47;\n            return (0, _oraHandler2.default)('Installing Application', function () {\n              var _ref4 = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2(installSpinner) {\n                var installActions, suffixFnIdent;\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        installActions = {\n                          win32: {\n                            '.exe': _exe2.default\n                          },\n                          darwin: {\n                            '.zip': _zip2.default,\n                            '.dmg': _dmg2.default\n                          },\n                          linux: {\n                            '.deb': _deb2.default,\n                            '.rpm': _rpm2.default\n                          }\n                        };\n                        suffixFnIdent = (0, _keys2.default)(installActions[process.platform]).find(function (suffix) {\n                          return targetAsset.name.endsWith(suffix);\n                        });\n                        _context2.next = 4;\n                        return installActions[process.platform][suffixFnIdent](fullFilePath, installSpinner);\n\n                      case 4:\n                      case 'end':\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, undefined);\n              }));\n\n              return function (_x3) {\n                return _ref4.apply(this, arguments);\n              };\n            }());\n\n          case 47:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, undefined);\n  }));\n\n  return function () {\n    return _ref.apply(this, arguments);\n  };\n}();","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/electron-forge.js":"#!/usr/bin/env node\n'use strict';\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _bluebird = require('bluebird');\n\nrequire('colors');\n\nvar _commander = require('commander');\n\nvar _commander2 = _interopRequireDefault(_commander);\n\nvar _tabtab = require('tabtab');\n\nvar _tabtab2 = _interopRequireDefault(_tabtab);\n\nrequire('./util/terminate');\n\nvar _oraHandler = require('./util/ora-handler');\n\nvar _oraHandler2 = _interopRequireDefault(_oraHandler);\n\nvar _checkSystem = require('./util/check-system');\n\nvar _checkSystem2 = _interopRequireDefault(_checkSystem);\n\nvar _config = require('./util/config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_commander2.default.version(require('../package.json').version).option('--verbose', 'Enables verbose mode').command('init', 'Initialize a new Electron application').command('import', 'Attempts to navigate you through the process of importing an existing project to \"electron-forge\"').command('lint', 'Lints the current Electron application').command('package', 'Package the current Electron application').command('make', 'Generate distributables for the current Electron application').command('start', 'Start the current Electron application').command('publish', 'Publish the current Electron application to GitHub').command('install', 'Install an Electron application from GitHub');\n\nvar tab = (0, _tabtab2.default)({\n  name: 'electron-forge'\n});\ntab.on('electron-forge', function (data, done) {\n  if (data.line.split(' ').length <= 2) {\n    done(null, _commander2.default.commands.filter(function (cmd) {\n      return cmd._name.startsWith(data.lastPartial);\n    }).map(function (cmd) {\n      return cmd._name + ':' + cmd._description;\n    }).sort());\n  } else {\n    done(null, []);\n  }\n});\ntab.start();\n\nif (process.argv[2] !== 'completion') {\n  (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {\n    var goodSystem;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            goodSystem = void 0;\n            _context2.next = 3;\n            return (0, _oraHandler2.default)('Checking your system', (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n              return _regenerator2.default.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return (0, _checkSystem2.default)();\n\n                    case 2:\n                      goodSystem = _context.sent;\n\n                    case 3:\n                    case 'end':\n                      return _context.stop();\n                  }\n                }\n              }, _callee, undefined);\n            })));\n\n          case 3:\n\n            if (!goodSystem) {\n              console.error(('It looks like you are missing some dependencies you need to get Electron running.\\n' + 'Make sure you have git installed and Node.js version 6.0.0+').red);\n              process.exit(1);\n            }\n\n            _commander2.default.parse(process.argv);\n\n            _config2.default.reset();\n            _config2.default.set('verbose', !!_commander2.default.verbose);\n\n          case 7:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }))();\n}","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/terminate.js":"'use strict';\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _colors = require('colors');\n\nvar _colors2 = _interopRequireDefault(_colors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nprocess.on('unhandledRejection', function (err) {\n  if (err && err.message && err.stack) {\n    console.error('\\nAn unhandled rejection has occurred inside Forge:'.red);\n    console.error(_colors2.default.red(err.message));\n    console.error(_colors2.default.red(err.stack));\n  } else {\n    console.error('\\nElectron forge was terminated:'.red);\n    console.error(_colors2.default.red(typeof err === 'string' ? err : (0, _stringify2.default)(err)));\n  }\n  process.exit(1);\n});\n\nprocess.on('uncaughtException', function (err) {\n  if (err && err.message && err.stack) {\n    console.error('\\nAn unhandled exception has occurred inside Forge:'.red);\n    console.error(_colors2.default.red(err.message));\n    console.error(_colors2.default.red(err.stack));\n  } else {\n    console.error('\\nElectron forge was terminated:'.red);\n    console.error(_colors2.default.red(typeof err === 'string' ? err : (0, _stringify2.default)(err)));\n  }\n  process.exit(1);\n});","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/dist/util/check-system.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _bluebird = require('bluebird');\n\nvar _child_process = require('child_process');\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {\n  return _regenerator2.default.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt('return', new _promise2.default(function (resolve) {\n            (0, _child_process.exec)('git --version', function (err) {\n              if (err) return resolve(false);\n              resolve(true);\n            });\n          }).then(function (prev) {\n            return _promise2.default.resolve(prev && _semver2.default.gt(process.versions.node, '6.0.0'));\n          }));\n\n        case 1:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, _callee, undefined);\n}));","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/.cz.js":"module.exports = {\n  types: [\n    {value: 'feat',     name: 'feat:     A new feature'},\n    {value: 'fix',      name: 'fix:      A bug fix'},\n    {value: 'docs',     name: 'docs:     Documentation only changes'},\n    {value: 'style',    name: 'style:    Changes that do not affect the meaning of the code\\n            (white-space, formatting, missing semi-colons, etc)'},\n    {value: 'refactor', name: 'refactor: A code change that neither fixes a bug nor adds a feature'},\n    {value: 'perf',     name: 'perf:     A code change that improves performance'},\n    {value: 'test',     name: 'test:     Adding missing tests'},\n    {value: 'chore',    name: 'chore:    Changes to the build process or auxiliary tools\\n            and libraries such as documentation generation'},\n    {value: 'revert',   name: 'revert:   Revert to a commit'},\n    {value: 'WIP',      name: 'WIP:      Work in progress'},\n  ],\n  scopes: [\n    { name: 'maker' },\n    { name: 'packager' },\n    { name: 'linter' },\n    { name: 'starter' },\n    { name: 'importer' },\n    { name: 'tests' },\n    { name: 'initializer' },\n    { name: 'publisher' },\n    { name: 'installer' },\n    { name: 'generic' },\n  ],\n  allowCustomScopes: true,\n}\n","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/gulpfile.babel.js":"/* eslint-disable import/no-extraneous-dependencies */\n\nimport gulp from 'gulp';\n\nimport babel from 'gulp-babel';\nimport fs from 'fs';\nimport path from 'path';\n\ngulp.task('transpile', () =>\n    gulp.src('./src/**/*.js')\n      .pipe(babel())\n      .pipe(gulp.dest('./dist'))\n);\n\ngulp.task('watch', ['build'], () => {\n  gulp.watch('./src/**/*.js', ['transpile']);\n});\n\ngulp.task('link', () => {\n  const files = fs.readdirSync(path.resolve(__dirname, './src'))\n    .filter(f => f.endsWith('.js'));\n  const packageJSON = require('./package.json');\n\n  if (!fs.existsSync(path.resolve(__dirname, './dist'))) fs.mkdirSync(path.resolve(__dirname, './dist'));\n\n  Object.keys(packageJSON.bin).forEach((binName) => {\n    if (binName === 'electron-forge') return;\n\n    if (packageJSON.bin[binName] === packageJSON.bin['electron-forge']) {\n      files.forEach((fileName) => {\n        fs.writeFileSync(\n          path.resolve(__dirname, `./dist/${fileName.replace('electron-forge', binName)}`),\n          `/* Auto-generated bin alias file */\\nglobal.__LINKED_FORGE__ = true;\\nrequire('./${fileName}');\\n`\n        );\n      });\n    }\n  });\n});\n\ngulp.task('build', ['transpile', 'link']);\n","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/tabtab-install.js":"const fs = require('fs');\nconst path = require('path');\nconst { findActualExecutable, spawnPromise } = require('spawn-rx');\n\nconst tabtabPath = path.resolve(__dirname, './node_modules/.bin/tabtab');\n\nif (!fs.existsSync(path.resolve(__dirname, 'src'))) {\n  spawnPromise(findActualExecutable(tabtabPath).cmd, ['install', '--auto'], {\n    stdio: 'inherit',\n  }).catch(err => console.error('Failed to install tab completion:', err));\n}\n","/home/travis/build/npmtest/node-npmtest-electron-forge/node_modules/electron-forge/tmpl/index.js":"import { app, BrowserWindow } from 'electron';\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\n\nconst createWindow = () => {\n  // Create the browser window.\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(`file://${__dirname}/index.html`);\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n\n  // Emitted when the window is closed.\n  mainWindow.on('closed', () => {\n    // Dereference the window object, usually you would store windows\n    // in an array if your app supports multi windows, this is the time\n    // when you should delete the corresponding element.\n    mainWindow = null;\n  });\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', createWindow);\n\n// Quit when all windows are closed.\napp.on('window-all-closed', () => {\n  // On OS X it is common for applications and their menu bar\n  // to stay active until the user quits explicitly with Cmd + Q\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n"}